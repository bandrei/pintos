            +-------------------+
            |       OS 211      |
            |  TASK 1: THREADS  |
            |  DESIGN DOCUMENT  |
            +-------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Rory Allford <rda10@imperial.ac.uk>
Andrei Bara <ab6610@imperial.ac.uk>
Alina Boghiu <ab3110@imperial.ac.uk>

---- PRELIMINARIES ----
>> Note that when calculating the maximum or minimum
>> from a list we have not used the already existing
>> function (i.e. list_get_max and functions for defining
>> the order of elements) as we considered it to be more 
>> resource efficient although the amount of code is increased
>> (function calls and the structures created within each function
>> call could be quite high) the point was for most of the code
>> to execute as fast as possible wher interrupts are disabled
>> (so is the case when waking threads contained in
>> semaphores, cond vars and the waiting_list).


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

~~~~~~~~~~~~thread.c~~~~~~~~~~~~~~~~~~~~~~~~~~~

*******static struct list waiting_list;*********
PURPOSE:
>> This struct will hold a list of sleeper elements
>> used to store information about the threads that
>> are put to sleep. 

*******static struct lock waiting_lock;*********
PURPOSE:
>> Create a lock to be used to avoid race conditions
>> when trying to insert a new element into the waiting_list
>> (It can't be used in an interrupt handler as it is a lock)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~synch.h~~~~~~~~~~~~~~~~~~~~~~
struct sleeper
  {
  int64_t sleep_time;
  struct semaphore waiting_semaphore;
  struct list_elem elem;
  }; 

PURPOSE:
>> Will store information about the threads that are being put asleep.
>> It will contain information about the sleeping time (which is actually
>> the time when a thread should be woken up) and a semaphore that will be
>> downed by the sleeping thread.
>> To be used in conjuction with "waiting_list".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

The timer_sleep(int64_t ticks) method calls thread_sleep(int64_t ticks) which puts the
current thread to sleep for 'ticks' number of timer ticks, adds it to the
'sleepers' list and yields the CPU to the scheduler to pick a new thread to run.



>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    int init_priority;			/* Initial priority when donation starts
					   (i.e. priority to revert to when all
					   of the donations have been removed */
    struct lock *try_lock;		/* Hold the lock the current thread is
					   trying to lock on */
    struct list lock_list;		/* Hold a list of locks that another
					   thread is trying to acquire from the
					   current thread */
    struct list_elem allelem;		/* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */
        
    /* BSD */
    fixed recent_cpu;
    int nice;

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

New memebers in struct threads:

int init_priority;
    // Holds the initial priority to which the thread reverts to after donation.

struct lock *try_lock;
    // Points to the lock the current thread is trying to lock on.

struct list lock_list;
    // Holds a list of locks that other threads are trying to acquires from the
       current thread.

fixed recent_cpu;

int nice;

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behaviour of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the task, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point mathematics in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point mathematics, that is, an abstract
>> data type and/or a set of functions or macros to manipulate
>> fixed-point numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?
