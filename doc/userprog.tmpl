             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Andrei Bara <ab6610@imperial.ac.uk>
Rory Allford <rda10@imperial.ac.uk>
Alina Boghiu <ab---@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


////////////////////////////////////////////////////////////////////
struct arg_elem
{
	unsigned int address;
	struct list_elem elem;
};

This structure will store the address of the arguments that are put
in a list when executing the whole of the argument passing mechanism
(primarily used in start_process).
////////////////////////////////////////////////////////////////////

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

First stage of the argument passing is done in process_execute when the file
name is being extracted from the whole string and passed on to thread_create.

The second stage takes place in start_process function (which gets executed 
after the thread has been created). The arguments get extracted from the string
one argument at a time using strtok_r and then they get added to a list of 
arguments in the order they are read from the string (i.e. the file name first
and then the rest). Also this list of arguments will store the information
about the stack address(as pointed by eip) where the current argument has been
added. At the same time the arguments are put onto the stack.

The third stage will take care of any padding that might be necessary by 
rounding down the if_.eip to a value that is multiple of four (see the algorithm
in the code used to do that) and also of writing the addresses of the previous
arguments on the stack (i.e. these addresses will be used as pointer addresses).
Finally add the address of the pointer to the argument pointers (i.e. char **)
and the argc (which is the size of the list).

By the way page fault is implemented if the stack gets corrupted or overflows
the thread will be killed (see implementation of kill() in exception.c) and all
of its resources released. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() uses a global variable to store the the current location/pointer
when tokenising the string (the global variable is stored somewhere in the user 
thread). 
This is a bad idea as in the kernel context this value might be overwritten
by other threads that call strtok and thus the tokenising process would fail.
strtok_r() on the other hand uses a local pointer in order to save the progress
which makes the function safe to use.  

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

One of the advantages of doing the argument passing in the shell is that
it allows for some more options when passing arguments (e.g. the user can
get file names as argument easier, by pressing TAB or it can edit the arguments
in an interactive way) and more user freedom by being able to customize the
way arguments are read.

Another advantage is that the tokenisation process is done in the shell and thus
reducing the amount of work that needs to be executed in kernel context (i.e.
the arguments could be passed in the usual way as an array with argc and argv
and in process_execute they could get copied off the stack into a temporary page
and afterwards in start_process they could simply be copied at the top of the
user space with a simple memcpy command. 

Also probably on of the most important aspects of shells is pipelining which 
allows for output from some processes to be passed as input to other processes
(the output can be modified the way the user wants).


                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



/////////////////////////////////////////////////////////////////////////
struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    int init_priority;			/* Initial priority when donation starts (i.e. priority to revert to 
					   when all of the donations have been removed */
    struct lock *try_lock;		/* Hold the lock the current thread is trying to lock on */
    struct list lock_list;		/* Hold a list of locks that another thread is trying to acquire
					   from the current thread (used in the donation process)*/
    struct list_elem allelem;		/* List element for all threads list. */
    
    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */
    /* User thread variables*/


    /* initialised to false, set to true if created by process_execute 
	which means that the thread is a user thread*/
    bool is_user_proc;

    struct thread *parent; //the parent of the current thread

    /* Children information for implementing the wait system call*/
    
    struct list children_info; //store a list for post-mortem child info
				//recovery
    struct list children;    //keep a list of children in order to update
			    //them as we die
    struct list_elem child_elem; //used to store us in the parent's 
				//child list
    tid_t child_wait_tid;
    struct semaphore thread_wait;
    tid_t exec_proc_pid;
    struct semaphore child_start;


    /* Files queue used to keep information about all the opened files*/
    struct file *our_file;
    struct list files_opened;
    bool locked_on_file;

    /* BSD */
    fixed recent_cpu;
    int nice;

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };


The modified thread strcture will store information about the children
(i.e. keeping a list of children and a list of children information such
as their exist status and if they have already exited).

Also store information about the files that are opened by the current thread,
if a file lock has been acquired and if the current thread is a user thread
or not.

Also several semaphores are in place in order to synchronize with the children
(semaphore child_start -used when starting a child thread for
recovering the correct thread tid-  and thread_wait).

/////////////////////////////////////////////////////////////////////

struct child_info
{
	tid_t child_tid;
	int exit_status;
	bool already_exit;
	struct list_elem info_elem;
};

Structure meant to keep information about the children if they
die before the parent process calls wait on them.

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
extern struct lock file_lock;

synchronization structure for file writing/operations

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
struct file
  {
    struct inode *inode;        /* File's inode. */
    off_t pos;  			/* Current position. */
    int fd; 				//file descriptor
    struct list_elem file_elem;
    bool deny_write;            /* Has file_deny_write() been called? */
  };

Modified file struct in order to be able to insert it in the files_opened
list of the thread that has opened the file (also it will keep information
about the file descriptor that has been allocated to it).
////////////////////////////////////////////////////////////////////

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a new file is opened the file descriptor allocated to it is the length
of the file list (of the current thread)+2 (as to skip the fds 0 and 1 which
are reserved for stdout/stdin).

The file descriptors are uniqure per thread (i.e. the same file can be opened
in another thread and will have another file descriptor).

Whenever doing operations on a file the thread will check that the file has been
opened (or otherwise if it's stdin/stdout) otherwise the operations will fail.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?


In the current implementation 0 calls to pagedir_get_page() are done as the
actual user thread has only 2 pages allocated to it (pagedir_create() will
only allocate one page for the code and another page for the user thread stack)
besides the kernel page. Which basically means that if the sys calls reads
from user space (most likely from the stack as there is no
support for other segments) 4 KB of data, one might get a page fault if the
data is not page aligned. As for the case of 2 bytes if the second byte is out
of the range of the page then a pagefault will be caused. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?
